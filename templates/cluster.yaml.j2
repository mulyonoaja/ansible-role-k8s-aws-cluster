{%- set master_zones = clusterSpec.master_zones | default(clusterSpec.aws_zones) -%}
---
apiVersion: kops/v1alpha2
kind: Cluster
metadata:
  name: {{ clusterSpec.cluster_name }}
spec:
  cloudProvider: aws
  configBase: '{{ state_store }}/{{ clusterSpec.cluster_name }}'
  dnsZone: '{{ clusterSpec.dns_zone }}'
{% if clusterSpec.kubeControllerManager %}
  kubeControllerManager:
{{ clusterSpec.kubeControllerManager | to_nice_yaml(indent=2) | indent(4, true) }}
{% endif %}
{% if clusterSpec.hooks %}
  hooks:
{{ clusterSpec.hooks | to_nice_yaml(indent=2) | indent(4, true) }}
{% endif %}
{% if clusterSpec.fileAssets %}
  fileAssets:
{{ clusterSpec.fileAssets | to_nice_yaml(indent=2) | indent(4, true) }}
{% endif %}
{% if clusterSpec.assets %}
  assets:
{{ clusterSpec.assets | to_nice_yaml(indent=2) | indent(4, true) }}
{% endif %}
{% if clusterSpec.cloudConfig %}
  cloudConfig:
{{ clusterSpec.cloudConfig | to_nice_yaml(indent=2) | indent(4, true) }}
{% endif %}
{% if clusterSpec.docker %}
  docker:
{{ clusterSpec.docker | to_nice_yaml(indent=2) | indent(4, true) }}
{% endif %}
{% if clusterSpec.kubelet %}
  kubelet:
{{ clusterSpec.kubelet | to_nice_yaml(indent=2) | indent(4, true) }}
{% endif %}
{% if clusterSpec.kubeAPIServer %}
  kubeAPIServer:
{{ clusterSpec.kubeAPIServer | to_nice_yaml(indent=2) | indent(4, true) }}
{% endif %}
{% if clusterSpec.kubernetesApiAccess %}
  kubernetesApiAccess:
{{ clusterSpec.kubernetesApiAccess | to_nice_yaml(indent=2) | indent(4, true) }}
{% endif %}
{% if clusterSpec.kubeScheduler %}
  kubeScheduler:
{{ clusterSpec.kubeScheduler | to_nice_yaml(indent=2) | indent(4, true) }}
{% endif %}
{% if clusterSpec.kubeDNS %}
  kubeDNS:
{{ clusterSpec.kubeDNS | to_nice_yaml(indent=2) | indent(4, true) }}
{% endif %}
{% if clusterSpec.api %}
  api:
{{ clusterSpec.api | to_nice_yaml(indent=2) | indent(4, true) }}
{% endif %}
{% if clusterSpec.authorization %}
  authorization:
{{ clusterSpec.authorization | to_nice_yaml(indent=2) | indent(4, true) }}
{% endif %}
{% if clusterSpec.authorization %}
  authorization:
{{ clusterSpec.authorization | to_nice_yaml(indent=2) | indent(4, true) }}
{% endif %}
{% if clusterSpec.iam %}
  iam:
{{ clusterSpec.iam | to_nice_yaml(indent=2) | indent(4, true) }}
{% endif %}
  channel: {{ clusterSpec.channel | default('stable') }}
{% if clusterSpec.cloudLabels is defined and clusterSpec.cloudLabels %}
  cloudLabels:
{{ clusterSpec.cloudLabels | to_nice_yaml(indent=2) | indent(4, true) }}
{% endif %}
  etcdClusters:
  - etcdMembers:
{% for zone in master_zones.split(',') %}
    - encryptedVolume: true
      instanceGroup: master-{{zone}}
      name: {{ zone[-1:] }}
      volumeSize: {{ clusterSpec.etcdMainVolumeSize }}
{% endfor %}
    name: main
{% if clusterSpec.enableEtcdTLS %}
    enableEtcdTLS: true
{% endif %}
{% if clusterSpec.etcdVersion %}
    version: {{ etcdVersion }}
{% endif %}

  - etcdMembers:
{% for zone in master_zones.split(',') %}
    - encryptedVolume: true
      instanceGroup: master-{{zone}}
      name: {{ zone[-1:] }}
      volumeSize: {{ clusterSpec.etcdEventsVolumeSize }}
{% endfor %}
    name: events
{% if clusterSpec.enableEtcdTLS %}
    enableEtcdTLS: true
{% endif %}
{% if clusterSpec.etcdVersion %}
    version: {{ etcdVersion }}
{% endif %}
{% if clusterSpec.additionalPolicies %}
  additionalPolicies:
{{ clusterSpec.additionalPolicies | to_nice_yaml(indent=2) | indent(4, true) }}
{% endif %}
  kubernetesApiAccess:
{{ clusterSpec.kubernetesApiAccess | to_nice_yaml(indent=2) | indent(2, true) }}
  kubernetesVersion: {{ clusterSpec.kubernetesVersion }}
  masterPublicName: api.{{ clusterSpec.dns_zone }}
  networkCIDR: {{ clusterSpec.networkCIDR }}
{% if vpc_id %}
  networkID: {{ vpc_id }}
{% endif %}
{% if clusterSpec.networking %}
  networking:
{{ clusterSpec.networking | to_nice_yaml(indent=2) | indent(4, true) }}
{% endif %}
  nonMasqueradeCIDR: {{ clusterSpec.nonMasqueradeCIDR }}
  sshAccess:
{{ clusterSpec.sshAccess | to_nice_yaml(indent=2) | indent(2, true) }}
  subnets:
{% for subnet in clusterSpec.subnets %}
  - cidr: {{ subnet.cidr }}
    name: {{ subnet.name }}
    type: {{ subnet.type }}
    zone: {{ subnet.zone }}
{% if vpc_subnets is defined and vpc_subnets[subnet.cidr] %}
    id: {{ vpc_subnets[subnet.cidr].id }}
{% endif %}
{% endfor %}
  topology:
{% if clusterSpec.create_bastions %}
    bastion:
      bastionPublicName: bastion.{{ clusterSpec.dns_zone }}
{% endif %}
    dns:
      type: Public
    masters: private
    nodes: private
{% if clusterSpec.sshKeyName is defined and clusterSpec.sshKeyName %}
  sshKeyName: {{ clusterSpec.sshKeyName }}
{% endif %}

{% if clusterSpec.create_bastions is defined and clusterSpec.create_bastions %}
{%- set instanceGroup = clusterSpec.defaultInstanceGroupSpec | combine(clusterSpec.instanceGroups.bastions, recursive=True) -%}
---
apiVersion: kops/v1alpha2
kind: InstanceGroup
metadata:
  labels:
    kops.k8s.io/cluster: {{ clusterSpec.cluster_name }}
  name: bastions
spec:
  image: {{ instanceGroup.image }}
  machineType: {{ instanceGroup.machineType }}
  maxSize: 1
  minSize: 1
  nodeLabels:
    kops.k8s.io/instancegroup: bastions
  role: Bastion
  subnets:
{% for zone in aws_zones.split(',') %}
  - utility-{{ zone }}
{% endfor %}
{% if sg_default %}
  additionalSecurityGroups:
  - {{ sg_default }}
{% endif %}

{% endif %}

{% for zone in master_zones.split(',') %}
{%- set instanceGroup = clusterSpec.defaultInstanceGroupSpec | combine(clusterSpec.instanceGroups.masters, recursive=True) -%}
---
apiVersion: kops/v1alpha2
kind: InstanceGroup
metadata:
  labels:
    kops.k8s.io/cluster: {{ clusterSpec.cluster_name }}
  name: master-{{ zone }}
spec:
  associatePublicIp: false
  image: {{ instanceGroup.image }}
  machineType: {{ instanceGroup.machineType }}
  maxSize: 1
  minSize: 1
  nodeLabels:
    kops.k8s.io/instancegroup: master-{{ zone }}
  role: Master
  rootVolumeSize: {{ instanceGroup.rootVolumeSize }}
  subnets:
  - {{ zone }}
{% if sg_default %}
  additionalSecurityGroups:
  - {{ sg_default }}
{% endif %}

{% endfor %}

{%- for name, spec in clusterSpec.instanceGroups.iteritems() -%}
{% if name not in ['masters', 'bastions'] %}
{%- set instanceGroup = clusterSpec.defaultInstanceGroupSpec | combine(spec, recursive=True) -%}
{%- set cloudLabels = instanceGroup.cloudLabels | default({}) -%}
{%- set nodeLabels = instanceGroup.nodeLabels | default({}) -%}
{%- if instanceGroup.autoScalerEnabled-%}
{%- set cloudLabels = {'k8s.io/cluster-autoscaler/enabled': 'true', 'kubernetes.io/cluster/'+clusterSpec.cluster_name : ''}|combine(cloudLabels, recursive=True) -%}
{%- endif -%}
{%- set suspendProcesses = instanceGroup.suspendProcesses | default([]) -%}

---
apiVersion: kops/v1alpha2
kind: InstanceGroup
metadata:
  labels:
    kops.k8s.io/cluster: {{ clusterSpec.cluster_name }}
  name: {{ name }}
spec:
  associatePublicIp: false
  image: {{ instanceGroup.image }}
  machineType: {{ instanceGroup.machineType }}
  maxSize: {{ instanceGroup.maxSize | default(instanceGroup.minSize) | default(0) }}
  minSize: {{ instanceGroup.minSize | default(0) }}
{% if instanceGroup.maxPrice is defined and instanceGroup.maxPrice %}
  maxPrice: {{ instanceGroup.maxPrice }}
{% endif %}
{% if instanceGroup.taints is defined and instanceGroup.taints %}
  taints:
{{ instanceGroup.taints | to_nice_yaml(indent=2) | indent(4, true) }}
{% endif %}
  role: Node
  rootVolumeSize: {{ instanceGroup.rootVolumeSize }}
  nodeLabels:
    kops.k8s.io/instancegroup: {{ name }}
{% if nodeLabels %}
{{ nodeLabels | to_nice_yaml(indent=2) | indent(4, true) }}
{% endif %}
{% if cloudLabels %}
  cloudLabels:
{{ cloudLabels | to_nice_yaml(indent=2) | indent(4, true) }}
{% endif %}
  subnets:
{% for zone in (instanceGroup.aws_zones | default(clusterSpec.aws_zones)).split(',') %}
  - {{ zone }}
{% endfor %}
{% if sg_default %}
  additionalSecurityGroups:
  - {{ sg_default }}
{% endif %}
{% if suspendProcesses %}
  suspendProcesses:
{% for sp in suspendProcesses %}
  - {{ sp }}
{% endfor %}
{% endif %}
{% endif %}

{% endfor %}
